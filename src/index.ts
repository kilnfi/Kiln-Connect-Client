require('update-electron-app')()
import electron, { app, BrowserWindow, ipcMain } from 'electron';

import services from './services';
import { Input } from './types/input';
import { Sdk } from './types/sdk';
import { shell } from 'electron';
import { UtilFunction } from './types/util';
import { OptionFunctionSdk } from './types/option';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

const optionFunctions = [
	{ name: OptionFunctionSdk.txAdaStake, func: services.sdk.tx.ada.stake },
	{ name: OptionFunctionSdk.txAdaUnstake, func: services.sdk.tx.ada.unstake },
	{ name: OptionFunctionSdk.txAdaGetStatus, func: services.sdk.tx.ada.getStatus },
	{ name: OptionFunctionSdk.txNearStake, func: services.sdk.tx.near.stake },
	{ name: OptionFunctionSdk.txNearUnstake, func: services.sdk.tx.near.unstake },
	{ name: OptionFunctionSdk.txNearGetStatus, func: services.sdk.tx.near.getStatus },
	{ name: OptionFunctionSdk.txSolStake, func: services.sdk.tx.sol.stake },
	{ name: OptionFunctionSdk.txSolDeactivate, func: services.sdk.tx.sol.deactivate },
	{ name: OptionFunctionSdk.txSolWithdraw, func: services.sdk.tx.sol.withdraw },
	{ name: OptionFunctionSdk.txSolSplit, func: services.sdk.tx.sol.split },
	{ name: OptionFunctionSdk.txSolMerge, func: services.sdk.tx.sol.merge },
	{ name: OptionFunctionSdk.txSolGetStatus, func: services.sdk.tx.sol.getStatus },
	{ name: OptionFunctionSdk.txAtomStake, func: services.sdk.tx.atom.stake },
	{ name: OptionFunctionSdk.txAtomUnstake, func: services.sdk.tx.atom.unstake },
	{ name: OptionFunctionSdk.txAtomGetStatus, func: services.sdk.tx.atom.getStatus },
];

optionFunctions.forEach((option) =>
	ipcMain.handle(option.name, async (_, sdk: Sdk, inputs: Input[]): Promise<any> => option.func(sdk, inputs)),
);

ipcMain.handle(UtilFunction.openInBrowser, (_, url: string): Promise<void> => shell.openExternal(url));

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
	app.quit();
}

const createWindow = (): void => {
	// Retrieve the desktop size.
	const { width, height } = electron.screen.getPrimaryDisplay().size;
	// Create the browser window.
	const mainWindow = new BrowserWindow({
		height,
		width,
		webPreferences: {
			preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
		},
		icon: './images/icon.png',
	});

	// and load the index.html of the app.
	mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

	// Open the DevTools.
	// mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
	if (process.platform !== 'darwin') {
		app.quit();
	}
});

app.on('activate', () => {
	// On OS X it's common to re-create a window in the app when the
	// dock icon is clicked and there are no other windows open.
	if (BrowserWindow.getAllWindows().length === 0) {
		createWindow();
	}
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
